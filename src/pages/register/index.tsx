import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { type FormEventHandler, useState } from "react";
import { unstable_getServerSession } from "next-auth";
import { authOptions } from "../api/auth/[...nextauth]";
import { useRouter } from "next/router";
import type { UserRegister } from "../../utils/schemas/user";

const Home: NextPage = () => {
  const router = useRouter();

  const [userForm, setUserForm] = useState<UserRegister>({
    name: "",
    email: "",
    password: "",
  });

  const handleSubmit: FormEventHandler<HTMLFormElement> = async (e) => {
    e.preventDefault();
    const response = await fetch("/api/auth/register", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(userForm),
    });
    if (response?.ok) router.push("/");
  };

  return (
    <>
      <Head>
        <title>Tet: Sign up</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="grid min-h-screen place-items-center bg-gradient-to-br from-slate-900 to-slate-800 text-slate-400">
        <form
          className="flex flex-col rounded-lg bg-slate-100 px-8 py-12 pb-6 text-black shadow-2xl dark:bg-gray-800 dark:text-white"
          onSubmit={handleSubmit}
        >
          <span className="mb-6 px-16 text-center text-2xl font-bold">
            <span className="inline-block whitespace-pre">Sign up </span>
            <span className="inline-block whitespace-pre">your account</span>
          </span>
          <label className="my-2 dark:text-gray-300">
            <span className="block py-1">Your username</span>
            <input
              className="w-full rounded-lg border border-slate-400 p-2 text-black placeholder-slate-400 outline-blue-600 dark:border-gray-800 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400"
              type="text"
              placeholder="username"
              value={userForm.name}
              onChange={(e) =>
                setUserForm({ ...userForm, name: e.target.value })
              }
              name="email"
              autoComplete="email"
            />
          </label>
          <label className="my-2 dark:text-gray-300">
            <span className="block py-1">Email</span>
            <input
              className="w-full rounded-lg border border-slate-400 p-2 text-black placeholder-slate-400 outline-blue-600 dark:border-gray-800 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400"
              type="email"
              placeholder="name@company.com"
              value={userForm.email}
              onChange={(e) =>
                setUserForm({ ...userForm, email: e.target.value })
              }
              name="email"
              autoComplete="email"
            />
          </label>
          <label className="my-2 dark:text-gray-300">
            <span className="block py-1">Password</span>
            <input
              className="w-full rounded-lg border border-slate-400 p-2 text-black placeholder-slate-400 outline-blue-600 dark:border-gray-800 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400"
              type="password"
              placeholder="password"
              value={userForm.password}
              onChange={(e) =>
                setUserForm({ ...userForm, password: e.target.value })
              }
              name="password"
              autoComplete="current-password"
            />
          </label>
          <button
            className="my-3 w-full rounded-lg bg-blue-600 p-3 font-semibold text-white transition-colors duration-300 ease-in-out hover:bg-blue-700"
            type="submit"
          >
            Create your account
          </button>
        </form>
      </main>
    </>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const session = await unstable_getServerSession(req, res, authOptions);
  if (session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {},
  };
};
